from ghci, use loadExpression to load arithmetic expressions from strings
simplification should move things around, but not collapse any operators
collapse joins constants together via multiplication and addition
flatten is a collapse step followed by a simplification

future plans:
-------------
include all log and power equivalencies, add all the trigonometric functions, e, and i

add derivatives, integrals, equations, logic, higher maths

write an arithmetic expression generator as a bfw, reusing the transformations, and adding a few generative (non-equivalent) transformations ([Seed] -> [Generator] -> (Expression, [Generator]))

install snap framework
  - expose as a json / html api
    - solve expression (expression -> (expression, pathToSolution))
    - generate complex expression (expression, pathToSolution, solution, generators)
    - verify solution (expression -> solution)
